import {httpStatusCodes} from "@customTypes/networkTypes";
import {NullableString} from "@customTypes/commonTypes";

interface iValidationErrorDetails {
	source: string;
	keys: Array<string | number>;
	message: string;
}

type ValidationErrorsType = Record<string, iValidationErrorDetails>;

interface iResponseMeta {
	// Unique request ID generated by the middleware.
	URID: NullableString;
}

interface iServiceError {
	error: string;
	message: string;
	validationErrors?: ValidationErrorsType | null;
}

interface iServiceSuccess {
	message: string;
}

type NullableServiceError = iServiceError | null;
type NullableServiceSuccess = iServiceSuccess | null;

type ServiceErrorMapType = {
	[key in string]: iServiceError;
};

type ServiceSuccessMapType = {
	[key in string]: iServiceSuccess;
};

type MultiServiceErrorMapTypeObject = {
	[key in string]: ServiceErrorMapType;
};

type MultiServiceSuccessMapTypeObject = {
	[key in string]: ServiceSuccessMapType;
};

interface iGenericServiceResult<SuccessResultType> {
	isSuccess: boolean;
	httpStatusCode: httpStatusCodes;
	error: NullableServiceError;
	meta: iResponseMeta;
	data: SuccessResultType;
}

/**
 * Function create iServiceError type object with type checking
 * but without loosing the inferred types and auto-complete in IDE.
 *
 * See: https://stackoverflow.com/a/52157355/6793156
 *
 * @param arg
 * @returns frozenServiceError
 */
function asTypeIServiceError<T extends MultiServiceErrorMapTypeObject>(
	arg: T
): T {
	return Object.freeze<T>(arg);
}

/**
 * Function create iServiceSuccess type object with type checking
 * but without loosing the inferred types and auto-complete in IDE.
 *
 * See: https://stackoverflow.com/a/52157355/6793156
 *
 * @param arg
 * @returns frozenServiceSuccess
 */
function asTypeIServiceSuccess<T extends MultiServiceSuccessMapTypeObject>(
	arg: T
): T {
	return Object.freeze<T>(arg);
}

export {asTypeIServiceError, asTypeIServiceSuccess};

export type {
	MultiServiceErrorMapTypeObject,
	MultiServiceSuccessMapTypeObject,
	iResponseMeta,
	iServiceError,
	iServiceSuccess,
	NullableServiceError,
	NullableServiceSuccess,
	iGenericServiceResult,
	iValidationErrorDetails,
	ValidationErrorsType,
};
